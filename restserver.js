// Generated by CoffeeScript 1.3.3
(function() {
  var Option, bulldata, calculateShippingCosts, callEbay, createEbayHTML, createError, ebay, getBulls, getCows, getEbayRequest, kvigedata, postCow, restify, server;

  restify = require("restify");

  kvigedata = require('./utils/kvigedata');

  bulldata = require('./utils/bulldata');

  ebay = require('./index.js');

  Option = (function() {

    Option.prototype.filters = null;

    Option.prototype.params = null;

    Option.prototype.appId = 'OyvindJo-fc9c-4d02-bab0-e19a5e11a5cd';

    function Option(serviceName, opType) {
      this.serviceName = serviceName;
      this.opType = opType;
    }

    Option.prototype.setFilters = function(filters) {
      this.filters = filters;
    };

    Option.prototype.setParams = function(params) {
      this.params = params;
    };

    return Option;

  })();

  getEbayRequest = function(option, callback) {
    return ebay.ebayApiGetRequest(option, callback);
  };

  server = restify.createServer();

  server.use(restify.bodyParser());

  getCows = function(req, res, next) {
    return res.send(kvigedata.allCows);
  };

  getBulls = function(req, res, next) {
    return res.send(bulldata.allBulls);
  };

  postCow = function(req, res, next) {
    return console.log('postCow: ' + req);
  };

  createEbayHTML = function(items, shippingCosts) {
    var count, html, item, _i, _len;
    html = '<html><body><table border="1">';
    count = 0;
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      console.log(item);
      html = html + '<tr>';
      html = html + '<td>' + item.title + '</td>';
      html = html + '<td><img src="' + item.galleryURL + '"></td>';
      html = html + '<td>$' + item.sellingStatus.currentPrice.USD + '</td>';
      html = html + '<td><a href="' + item.viewItemURL + '">ebay</a></td>';
      html = html + '<td id="shippingCost">' + shippingCosts[count++] + '</td>';
      html = html + '</tr>';
    }
    html = html + '</table></body></html>';
    return html;
  };

  calculateShippingCosts = function(items, callback) {
    var costs, count, item, option, _i, _len;
    costs = [];
    count = 0;
    Option(option = new Option('', 'GetShippingCosts'));
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      costs[count++] = 9;
    }
    return callback(costs);
  };

  callEbay = function(req, res, next) {
    var filters, option, params;
    params = {};
    params.keywords = ["Porsche", "944"];
    params.categoryId = 6028;
    params.descriptionSearch = true;
    filters = {};
    filters.itemFilter = [new ebay.ItemFilter("FreeShippingOnly", false), new ebay.ItemFilter("AvailableTo", 'NO')];
    option = new Option('FindingService', 'findItemsAdvanced');
    option.setFilters(filters);
    option.setParams(params);
    return getEbayRequest(option, function(error, items) {
      console.log('got response, error: ' + error + ', items: ' + items);
      return calculateShippingCosts(items, function(shippingCosts) {
        var html;
        html = createEbayHTML(items, shippingCosts);
        res.writeHead(200, {
          'Content-Length': Buffer.byteLength(html),
          'Content-Type': 'text/html'
        });
        res.write(html);
        return res.end();
      });
    });
  };

  createError = function(err) {
    var error;
    console.log('error: ' + err);
    error = new Error(err);
    error.statusCode = 400;
    return error;
  };

  server.get("/cows/aktuelle", getCows);

  server.get("/bulls", getBulls);

  server.post("/cows", postCow);

  server.get("/ebay", callEbay);

  server.listen(8080, function() {
    return console.log("%s listening at %s", server.name, server.url);
  });

}).call(this);
