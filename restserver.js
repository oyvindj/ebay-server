// Generated by CoffeeScript 1.6.3
(function() {
  var Option, bulldata, callEbay, createEbayHTML, createError, ebay, getBulls, getCows, getEbay, getEbayItems, getShippingCosts, getShippingCosts2, kvigedata, postCow, restify, server, sortByDate;

  restify = require("restify");

  kvigedata = require('./utils/kvigedata');

  bulldata = require('./utils/bulldata');

  ebay = require('./index.js');

  Option = (function() {
    Option.prototype.filters = null;

    Option.prototype.params = null;

    Option.prototype.appId = 'OyvindJo-fc9c-4d02-bab0-e19a5e11a5cd';

    function Option(serviceName, opType) {
      this.serviceName = serviceName;
      this.opType = opType;
    }

    Option.prototype.setFilters = function(filters) {
      this.filters = filters;
    };

    Option.prototype.setParams = function(params) {
      this.params = params;
    };

    return Option;

  })();

  callEbay = function(option, callback) {
    return ebay.ebayApiGetRequest(option, function(error, data) {
      console.log('got response');
      console.log('error: ' + error);
      if (data !== void 0) {
        console.log("data: %j", data);
      }
      return callback(error, data);
    });
  };

  server = restify.createServer();

  server.use(restify.bodyParser());

  getCows = function(req, res, next) {
    return res.send(kvigedata.allCows);
  };

  getBulls = function(req, res, next) {
    return res.send(bulldata.allBulls);
  };

  postCow = function(req, res, next) {
    return console.log('postCow: ' + req);
  };

  sortByDate = function(a, b) {
    var aName, bName, ret;
    aName = new Date(a.listingInfo.startTime);
    bName = new Date(b.listingInfo.startTime);
    ret = 0;
    if (aName.getTime() < bName.getTime()) {
      ret = 1;
    } else if (aName.getTime() > bName.getTime()) {
      ret = -1;
    }
    return ret;
  };

  createEbayHTML = function(inItems, shippingCosts) {
    var count, diffTime, diffTimeDays, diffTimeHours, diffTimeMinutes, endTime, html, item, items, now, startTime, _i, _len;
    items = inItems.sort(sortByDate);
    html = '<html><body><table border="1">';
    html = html + '<tr><td>Found' + items.length + ' items</td></tr>';
    count = 0;
    now = new Date();
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      html = html + '<tr>';
      html = html + '<td><table><tr><td>' + item.title + '</td></tr><tr><td>' + item.title + '</td></tr></table></td>';
      html = html + '<td><img src="' + item.galleryURL + '"></td>';
      html = html + '<td>$' + item.sellingStatus.currentPrice.USD + '</td>';
      html = html + '<td><a href="' + item.viewItemURL + '">ebay</a></td>';
      html = html + '<td id="shippingCost">' + shippingCosts[count++] + '</td>';
      html = html + '<td>' + item.listingInfo.buyItNowAvailable + '</td>';
      startTime = new Date(item.listingInfo.startTime);
      endTime = new Date(item.listingInfo.endTime);
      diffTime = now - startTime;
      diffTimeMinutes = Math.floor(diffTime / 1000 / 60);
      diffTimeHours = Math.floor(diffTime / 1000 / 60 / 60);
      diffTimeDays = Math.floor(diffTimeHours / 24);
      html = html + '<td>' + startTime.getDate() + '/' + (startTime.getMonth() + 1) + '</td>';
      html = html + '<td>' + diffTimeMinutes + ' mins (' + diffTimeDays + 'd)</td>';
      html = html + '<td>' + endTime.getDate() + '/' + (endTime.getMonth() + 1) + '</td>';
      html = html + '</tr>';
    }
    html = html + '</table></body></html>';
    return html;
  };

  getShippingCosts = function(items, callback) {
    var costs, item, _i, _len;
    costs = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      costs.push(9);
    }
    return callback('', costs);
  };

  getShippingCosts2 = function(items, callback) {
    var costs, index, item, paginationInput, params, resultCount, shippingOption, _i, _len, _results;
    console.log('calculating shipping for items');
    costs = [];
    resultCount = 0;
    index = 0;
    shippingOption = new Option('Shopping', 'GetShippingCosts');
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      console.log('making shipping cost call for item: ' + item.itemId);
      params = {};
      params.ItemID = item.itemId;
      params.DestinationCountryCode = 'NO';
      params.DestinationPostalCode = '1903';
      params.IncludeDetails = true;
      params.MessageID = item.itemId;
      paginationInput = {};
      paginationInput.entriesPerPage = 3;
      params.paginationInput = paginationInput;
      shippingOption.setParams(params);
      callEbay(shippingOption, function(error, shippingCost) {
        console.log('got shipping call response');
        resultCount++;
        costs[index] = shippingCost;
        if ((error.length === 0) && (resultCount === items.length)) {
          console.log('got all shipping costs');
          return callback(costs);
        }
      });
      _results.push(index++);
    }
    return _results;
  };

  getEbayItems = function(items, callback) {
    var costs, index, item, option, params, resultCount, _i, _len, _results;
    console.log('getting ebay items...');
    costs = [];
    resultCount = 0;
    index = 0;
    option = new Option('Shopping', 'GetSingleItem');
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      console.log('making call for item: ' + item.itemId);
      params = {};
      params.ItemID = item.itemId;
      params.MessageID = index;
      option.setParams(params);
      callEbay(option, function(error, ebayItem) {
        console.log('got ebay item response: ' + ebayItem);
        costs[resultCount++] = ebayItem[0];
        if (resultCount === items.length) {
          console.log('got all ebay items');
          return callback(costs);
        }
      });
      _results.push(index++);
    }
    return _results;
  };

  getEbay = function(req, res, next) {
    var filters, option, params;
    params = {};
    params.keywords = ["Porsche", "944"];
    params.categoryId = 6028;
    params.descriptionSearch = true;
    filters = {};
    filters.itemFilter = [new ebay.ItemFilter("FreeShippingOnly", false), new ebay.ItemFilter("AvailableTo", 'NO')];
    option = new Option('FindingService', 'findItemsAdvanced');
    option.setFilters(filters);
    option.setParams(params);
    return callEbay(option, function(error, items) {
      return getShippingCosts(items, function(shippingCosts) {
        var html;
        console.log('got shipping cost');
        html = createEbayHTML(items, shippingCosts);
        res.writeHead(200, {
          'Content-Length': Buffer.byteLength(html),
          'Content-Type': 'text/html'
        });
        res.write(html);
        return res.end();
      });
    });
  };

  createError = function(err) {
    var error;
    console.log('error: ' + err);
    error = new Error(err);
    error.statusCode = 400;
    return error;
  };

  server.get("/cows/aktuelle", getCows);

  server.get("/bulls", getBulls);

  server.post("/cows", postCow);

  server.get("/ebay", getEbay);

  server.listen(8089, function() {
    return console.log("%s listening at %s", server.name, server.url);
  });

}).call(this);
